stages:
  - tests
  - e2e
  - release

.poetry_install: &poetry_install
  - python -m pip install --user pipx
  - python -m pipx ensurepath
  - source ~/.profile
  - pipx install poetry~=2.1.1
  - poetry install --no-interaction --no-root --extras "test dev"

.install_pydev_for_3_13_only: &install_pydev_for_3_13_only
  - |- 
        if  [[ $(python --version) == 'Python 3.13'* ]]; then
            apt update; 
            apt install -y libopenblas-dev gfortran; 
        fi

test:
  image: python:$VERSION
  needs: []
  stage: tests
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG =~ /^v.*$/
  script:
    - *install_pydev_for_3_13_only
    - *poetry_install
    - poetry run black tergite --check
    - poetry run pytest tests/
  parallel:
    matrix:
      - VERSION: ['3.9-slim', '3.10-slim', '3.11-slim', '3.12-slim', '3.13-bookworm']

e2e:
  needs: []
  image: docker:latest
  services:
    - name: docker:dind
  stage: e2e
  when: manual
  manual_confirmation: 'Are you sure you want to run the end-to-end test?'
  variables:
    FRONTEND_REPO: "https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_NAMESPACE}/tergite-frontend.git"
    BACKEND_REPO: "https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_NAMESPACE}/tergite-backend.git"
    BACKEND_BRANCH: "main"
    FRONTEND_BRANCH: "main"
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375/
    PYTHON_IMAGE: python:$VERSION
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG =~ /^v.*$/
  before_script:
    - docker info
    - apk update && apk add --no-cache curl bash build-base
      openssl-dev zlib-dev libffi-dev make git
  script:
    - ./e2e_test.sh
  parallel:
    matrix:
      - VERSION: ['3.9-slim', '3.10-slim', '3.11-slim', '3.12-slim', '3.13-bookworm']

deploy staging:
  stage: release
  needs:
    - test
    - e2e
  environment: staging
  image: python:3.9-slim
  rules:
    - if: $SHOULD_PUBLISH_TO_STAGING == "true" && $CI_COMMIT_TAG =~ /^v.*$/
  script:
    - *poetry_install
    - poetry config repositories.test-pypi https://test.pypi.org/legacy/
    - poetry config pypi-token.test-pypi $TEST_PYPI_API_TOKEN
    - poetry publish -r test-pypi

deploy production:
  stage: release
  needs:
    - test
    - e2e
  environment: production
  image: python:3.9-slim
  rules:
    - if: $SHOULD_PUBLISH_TO_PROD == "true" && $CI_COMMIT_TAG =~ /^v.*$/
  script:
    - *poetry_install
    - poetry config pypi-token.pypi $PYPI_API_TOKEN
    - poetry publish
