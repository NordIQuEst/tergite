stages:
  - lint
  - tests
  - release

.poetry_install: &poetry_install
  - python -m pip install --user pipx
  - python -m pipx ensurepath
  - source ~/.profile
  - pipx install poetry==1.5.1
  - poetry install --no-interaction --no-root

.run_pytests: &run_pytests
  stage: tests
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" 
    - if: $CI_COMMIT_TAG =~ /^v.*$/
  script:
    - *poetry_install
    - poetry run pytest tests/

.check_linter: &check_linter
  stage: lint
  rules:
    - if: $SHOULD_LINT == "true" && $CI_PIPELINE_SOURCE == "merge_request_event" 
    - if: $SHOULD_LINT == "true" && $CI_COMMIT_TAG =~ /^v.*$/
  script:
    - *poetry_install
    - poetry run black tergite --check

lint python3.8:
  <<: *check_linter
  image: python:3.8-slim

lint python3.9:
  <<: *check_linter
  image: python:3.9-slim

lint python3.10:
  <<: *check_linter
  image: python:3.10-slim

test python3.8:
  <<: *run_pytests
  image: python:3.8-slim

test python3.9:
  <<: *run_pytests
  image: python:3.9-slim

test python3.10:
  <<: *run_pytests
  image: python:3.10-slim


deploy staging:
  stage: release
  environment: staging
  image: python:3.8-slim
  rules:
    - if: $SHOULD_PUBLISH_TO_STAGING == "true" && $CI_COMMIT_TAG =~ /^v.*$/
  script:
    - *poetry_install
    - poetry config repositories.test-pypi https://test.pypi.org/legacy/
    - poetry config pypi-token.test-pypi $TEST_PYPI_API_TOKEN
    - poetry publish -r test-pypi

deploy production:
  stage: release
  environment: production
  image: python:3.8-slim
  rules:
    - if: $SHOULD_PUBLISH_TO_PROD == "true" && $CI_COMMIT_TAG =~ /^v.*$/
  script:
    - *poetry_install
    - poetry config pypi-token.pypi $PYPI_API_TOKEN
    - poetry publish
